#version 430

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform image2D image;

uniform uint sample_index;
uniform vec2 world_size;
uniform vec2 mouse;


const float pi = 3.14159274;


uint hash(uint x)
{
    x += x << 10;
    x ^= x >> 6;
    x += x << 3;
    x ^= x >> 11;
    x += x << 15;
    return x;
}

float random(inout uint rng_state)
{
    rng_state ^= rng_state << 13;
    rng_state ^= rng_state >> 17;
    rng_state ^= rng_state << 5;
    // NOTE: currently this can return 1.0
    return float(rng_state) / 4294967295.0;
}

float intersect_circle(vec2 origin, vec2 direction, vec2 center, float radius)
{
    const vec2 oc = center - origin;
    const float oc_dot_dir = dot(oc, direction);
    const float det = oc_dot_dir * oc_dot_dir - dot(oc, oc) + radius * radius;
    if (det < 0.0)
    {
        return 0.0;
    }

    const float sqrt_det = sqrt(det);
    const float t1 = oc_dot_dir - sqrt_det;
    const float epsilon = 1e-6;
    if (t1 > epsilon)
    {
        return t1;
    }

    const float t2 = oc_dot_dir + sqrt_det;
    if (t2 > epsilon)
    {
        return t2;
    }

    return 0.0;
}

void main()
{
    const uvec2 image_size = imageSize(image);
    if (gl_GlobalInvocationID.x >= image_size.x || gl_GlobalInvocationID.y >= image_size.y)
    {
        return;
    }

    const uint pixel_index = gl_GlobalInvocationID.y * image_size.x + gl_GlobalInvocationID.x;
    uint rng_state = hash(sample_index * image_size.x * image_size.y + pixel_index);

    // Circle
    const vec2 center = world_size * 0.5;
    const float radius = world_size.x * 0.15;
    // Light
    const vec2 light_pos = mouse * world_size;
    // Ray
    const vec2 ray_origin = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5)) / vec2(image_size) * world_size;
    const vec2 to_light = light_pos - ray_origin;
    const float dist_to_light = length(to_light);
    const vec2 ray_direction = to_light / dist_to_light;
    const float t = intersect_circle(ray_origin, ray_direction, center, radius);
    vec4 color;
    if (t > 0.0 && t < dist_to_light)
    {
        color = vec4(0.0, 0.0, 0.0, 1.0);
    }
    else
    {
        color = vec4(vec3(min(0.05 / dist_to_light, 1.0)), 1.0);
    }

    vec4 average_color = imageLoad(image, ivec2(gl_GlobalInvocationID.xy));
    average_color = (average_color * sample_index + color) / (sample_index + 1);
    imageStore(image, ivec2(gl_GlobalInvocationID.xy), average_color);
}
